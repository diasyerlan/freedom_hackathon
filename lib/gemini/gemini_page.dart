import 'dart:io';
import 'dart:typed_data';

import 'package:dash_chat_2/dash_chat_2.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter_gemini/flutter_gemini.dart';
import 'package:freedom_app/components/custom_app_bar.dart';
import 'package:image_picker/image_picker.dart';

class GeminiPage extends StatefulWidget {
  const GeminiPage({super.key});

  @override
  State<GeminiPage> createState() => _GeminiPageState();
}

class _GeminiPageState extends State<GeminiPage> {
  final currentAuthUser = FirebaseAuth.instance.currentUser!;
  final Gemini gemini = Gemini.instance;
  ChatUser currentUser = ChatUser(id: '0', firstName: 'User');

  ChatUser geminiUser =
      ChatUser(id: '1', firstName: 'HR Bot', profileImage: 'assets/3.png');

  List<ChatMessage> messages = [];

  @override
  void initState() {
    super.initState();

    // Send the initial message when the page is loaded
    _sendInitialMessage();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: GradientAppBar(
          title: const Text(
            "–£–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç",
            style: TextStyle(
                fontFamily: 'Aldrich', color: Colors.white),
          ),
        ),
        body: _buildUI());
  }

  Widget _buildUI() {
    return DashChat(
        inputOptions: InputOptions(trailing: [
          IconButton(
              onPressed: _sendMediaMessage, icon: const Icon(Icons.image))
        ]),
        currentUser: currentUser,
        onSend: _sendMessage,
        messages: messages);
  }

  // Method to send the first message
  void _sendInitialMessage() {
    ChatMessage initialMessage = ChatMessage(
      user: geminiUser,
      createdAt: DateTime.now(),
      text:
          "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${currentAuthUser.email!.split('@')[0]}!\n\n–Ø ‚Äî –≤–∞—à –Ω–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–¥–±–æ—Ä—É –ø–µ—Ä—Å–æ–Ω–∞–ª–∞, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∏ —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–π–º–∞! üéâ\n\n–Ø –º–æ–≥—É:\n–ü—Ä–æ–≤–æ–¥–∏—Ç—å –ø–µ—Ä–≤–∏—á–Ω—ã–π –æ—Ç–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è —Ä–µ–∑—é–º–µ –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ–ø—Ä–æ—Å—ã,\n–ü–æ–º–æ–≥–∞—Ç—å —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º,\n–û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤,\n–ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä–≤—å—é –∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π,\n–°–æ–±–∏—Ä–∞—Ç—å –∏ —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç –∫–æ–º–∞–Ω–¥—ã.\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö, –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ç–±–æ—Ä–∞ –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å. –¢–∞–∫–∂–µ —è –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–æ–º, –∫–∞–∫ —è –º–æ–≥—É –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–∞—Å –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ –ø–æ–¥–±–æ—Ä–∞.\n–î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Å–¥–µ–ª–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–π–º–∞ –µ—â–µ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º! üöÄ\n\n–° –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ!",
    );

    setState(() {
      messages = [initialMessage, ...messages];
    });
  }

  void _sendMessage(ChatMessage chatMessage) {
    setState(() {
      messages = [chatMessage, ...messages];
    });

    try {
      String question =
          "${chatMessage.text}. –û—Ç–≤–µ—á–∞–π—Ç–µ, –µ—Å–ª–∏ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º–∏. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ —Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–∞–∫ –∫–∞–∫ —Ç—ã –Ω–µ –∏–º–µ–µ—à—å —Ç–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.";
      List<Uint8List>? images;
      if (chatMessage.medias?.isNotEmpty ?? false) {
        images = [File(chatMessage.medias!.first.url).readAsBytesSync()];
      }

      gemini.streamGenerateContent(question, images: images).listen((event) {
        ChatMessage? lastMessage = messages.firstOrNull;
        if (lastMessage != null && lastMessage.user == geminiUser) {
          lastMessage = messages.removeAt(0);
          String response = event.content?.parts?.fold(
                  "", (previous, current) => "$previous ${current.text}") ??
              "";
          lastMessage.text += response;
          setState(() {
            messages = [lastMessage!, ...messages];
          });
        } else {
          String response = event.content?.parts?.fold(
                  "", (previous, current) => "$previous${current.text}") ??
              "";
          ChatMessage message = ChatMessage(
              user: geminiUser, createdAt: DateTime.now(), text: response);
          setState(() {
            messages = [message, ...messages];
          });
        }
      });
    } catch (e) {
      print(e);
    }
  }

  void _sendMediaMessage() async {
    ImagePicker picker = ImagePicker();
    XFile? file = await picker.pickImage(source: ImageSource.gallery);
    if (file != null) {
      ChatMessage message = ChatMessage(
          user: currentUser,
          createdAt: DateTime.now(),
          text:
              '–û–±—å—è—Å–Ω–∏ —ç—Ç–æ —Ñ–æ—Ç–æ –µ—Å–ª–∏ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º–∏. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ —Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–∞–∫ –∫–∞–∫ —Ç—ã –Ω–µ –∏–º–µ–µ—à—å —Ç–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.',
          medias: [
            ChatMedia(url: file.path, fileName: '', type: MediaType.image)
          ]);
      _sendMessage(message);
    }
  }
}
